<git init>:
    The git init command creates a new Git repository. It can be used to convert an existing, unversioned project to a Git repository or initialize a new, empty repository. Most other Git commands are not available outside of an initialized repository, so this is usually the first command you'll run in a new project.
<git config>:
    The git config command is a convenience function that is used to set Git configuration values on a global or local project level. These configuration levels correspond to .gitconfig text files. Executing git config will modify a configuration text file.

    Ex:
        <git config --global user.name USERNAME>:
        <git config --global user.email EMAIL>:
            On Windows, use either the Command Prompt or Git Bash. To change the name linked to your Git, enter the command: git config --global user.name "Your Name", replacing "Your Name" with your actual first and last name. To set your email on Git, use the command: git config --global user.
        
<ls -lart>:
    The ls command is used to list files. "ls" on its own lists all files in the current directory except for hidden files.

<git status>:
    The git status command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven't, and which files aren't being tracked by Git.

<git add filename>:
    or
<git add .>:
    or
<git add -A>:
    The git add command adds a change in the working directory to the staging area. It tells Git that you want to include updates to a particular file in the next commit.

<git commit -m "message">:
    The git commit command is one of the core primary functions of Git. Prior use of the git add command is required to select the changes that will be staged for the next commit. Then git commit is used to create a snapshot of the staged changes along a timeline of a Git projects history.

<git log>:
    git log. The git log command displays committed snapshots. It lets you list the project history, filter it, and search for specific changes.
<git checkout filename>:
    The git checkout command is used to update the state of the repository to a specific point in the projects history. When passed with a branch name, it lets you switch between branches. Internally, all the above command does is move HEAD to a different branch and update the working directory to match.

<git checkout -f>:
    The git checkout command lets you navigate between the branches created by git branch . Checking out a branch updates the files in the working directory to match the version stored in that branch, and it tells Git to record all new commits on that branch.

<git log>:
    git log. The git log command displays committed snapshots. It lets you list the project history, filter it, and search for specific changes.