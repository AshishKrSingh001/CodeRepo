<git init>:
    The git init command creates a new Git repository. It can be used to convert an existing, unversioned project to a Git repository or initialize a new, empty repository. Most other Git commands are not available outside of an initialized repository, so this is usually the first command you'll run in a new project.
<git config>:
    The git config command is a convenience function that is used to set Git configuration values on a global or local project level. These configuration levels correspond to .gitconfig text files. Executing git config will modify a configuration text file.

    Ex:
        <git config --global user.name USERNAME>:
        <git config --global user.email EMAIL>:
            On Windows, use either the Command Prompt or Git Bash. To change the name linked to your Git, enter the command: git config --global user.name "Your Name", replacing "Your Name" with your actual first and last name. To set your email on Git, use the command: git config --global user.
        
<ls -lart>:
    The ls command is used to list files. "ls" on its own lists all files in the current directory except for hidden files.

<git status>:
    The git status command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven't, and which files aren't being tracked by Git.
<git status -s>:
    The git status command is used to display the state of the repository and staging area. It allows us to see the tracked, untracked files and changes. This command will not show any commit records or information. Mostly, it is used to display the state between Git Add and Git commit command.

<git add filename>:
    or
<git add .>:
    or
<git add -A>:
    The git add command adds a change in the working directory to the staging area. It tells Git that you want to include updates to a particular file in the next commit.

<git commit -m "message">:
    The git commit command is one of the core primary functions of Git. Prior use of the git add command is required to select the changes that will be staged for the next commit. Then git commit is used to create a snapshot of the staged changes along a timeline of a Git projects history.

<git commit -a -m "message">:
    skipped staged area.

<git log>:
    git log. The git log command displays committed snapshots. It lets you list the project history, filter it, and search for specific changes.

<git checkout filename>:
    The git checkout command is used to update the state of the repository to a specific point in the projects history. When passed with a branch name, it lets you switch between branches. Internally, all the above command does is move HEAD to a different branch and update the working directory to match.

<git checkout -f>:
    The git checkout command lets you navigate between the branches created by git branch . Checking out a branch updates the files in the working directory to match the version stored in that branch, and it tells Git to record all new commits on that branch.

<git log>:
    git log. The git log command displays committed snapshots. It lets you list the project history, filter it, and search for specific changes.

<git log -p -count>:
    Git is a widely used distributed version control system that allows software developers to manage and track changes to their codebase. Git logs are an essential part of Git that can help developers understand what changes have been made to a repository, who made them, and when they were made.
<git diff>:
    The git diff command helps you see, compare, and understand changes in your project. You can use it in many different situations, e.g. to look at current changes in your working copy, past changes in commits, or even to compare branches.

<git diff --staged>:
    The git diff command allows us to track the changes that are staged but not committed. We can track the changes in the staging area. To check the already staged changes, use the --staged option along with git diff command.

<touch filename>:
    The touch command's primary function is to modify a timestamp. Commonly, the utility is used for file creation, although this is not its primary function. The terminal program can change the modification and access time for any given file. The touch command creates a file only if the file doesn't already exist.

<git rm filename>:
    The git rm command can be used to remove individual files or a collection of files. The primary function of git rm is to remove tracked files from the Git index. Additionally, git rm can be used to remove files from both the staging index and the working directory.

<git rm --cached filename>:
    --cached. Removes the file only from the Git repository, but not from the filesystem. By default, the git rm command deletes files both from the Git repository as well as the filesystem. Using the --cached flag, the actual file on disk will not be deleted.

{.gitignore file}:
    The purpose of gitignore files is to ensure that certain files not tracked by Git remain untracked.
    Ex:
        for specifying particular file: [filename]
        for specifying  particular directory: [dirName/]
        for specifying particular extension: [*.extensionName]

<git branch>:
    The git branch command lets you show branches. It doesn't let you switch between branches.

<git branch branchName>:
    The git branch command lets you create, list, rename, and delete branches. It doesn't let you switch between branches or put a forked history back together again. For this reason, git branch is tightly integrated with the git checkout and git merge commands.

<git checkout branchName>:
    To switch between local branches, the 'git checkout my-branch-name' command is used. For branches from a remote repository, the 'git checkout --track origin/my-branch-name' command is utilized.

<git merge branchName>:
    It means "merge the branches origin and branchname into the current branch" -- effectively requesting that two other branches be merged into your current branch. Note that origin is a remote; when used as a commit identifier, it is equivalent to origin/HEAD (which typically points to origin/master ).

<git checkout -b branchname>:
    This command lets you to create a new branch and automatically switched to newly created branch.

<git remote add origin repoName.git>:
    add is a subcommand of remote (which is a subcommand of the command git ). This is used to add a repository, but there are some other subcommands, like rename to rename a remote, set-url to change the URL of a remote, etc. origin is the name of the remote.

<git remote>:
    origin

<git remote -v>:
    The git remote command lets you view connections to other repositories. Remote connections are more like bookmarks rather than direct links into other repositories.

<git push -u origin branchName>:
    Create a new, local Git branch in your repository. Perform a git push origin -u <branchname> command to push to the remote repo. Continue to perform Git commits locally on the new branch. Simply use the git push origin command on subsequent pushes of the new branch to the remote repo.

<git push>:
    The git push command is used to upload local repository content to a remote repository. Pushing is how you transfer commits from your local repository to a remote repo. It's the counterpart to git fetch, but whereas fetching imports commits to local branches, pushing exports commits to remote branches.

<git pull>:
    The git pull command is used to fetch and download content from a remote repository and immediately update the local repository to match that content.